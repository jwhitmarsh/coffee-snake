// Generated by CoffeeScript 1.7.1
var addNewApple, appendNewSeg, bBounds, collision, container, direction, displayHighscore, getRndBetween, godMode, growSnake, isTopScore, lBounds, leadSeg, loadHighscores, moveInterval, moveSeg, moveTime, newApple, rBounds, restart, saveHighscore, score, setTimer, showCrashModal, showHighscoreModal, sibs, snake, snakeSeg, startGame, stop, tBounds;

snake = $('<div>');

snakeSeg = $('<div>');

direction = 'down';

sibs = 6;

leadSeg = null;

rBounds = null;

lBounds = null;

tBounds = null;

bBounds = null;

moveInterval = null;

newApple = null;

moveTime = 150;

score = 0;

container = $('#play-wrap');

snakeSeg.addClass('snake-seg');

$(function() {
  return startGame();
});

startGame = function() {
  lBounds = container.offset().left;
  rBounds = container.outerWidth() + lBounds - 10;
  tBounds = container.offset().top;
  bBounds = container.outerHeight() + tBounds - 12;
  leadSeg = snakeSeg.clone();
  leadSeg.position({
    top: (rBounds / 2).FindClosestNumberThatIsDivisibleBy(10),
    left: (bBounds / 2).FindClosestNumberThatIsDivisibleBy(10)
  });
  leadSeg.addClass('lead-seg');
  container.append(leadSeg);
  growSnake(sibs);
  addNewApple();
  moveInterval = setInterval(function() {
    var offset;
    offset = leadSeg.offset();
    switch (direction) {
      case "left":
        return moveSeg(leadSeg, offset.top, offset.left - 11);
      case "right":
        return moveSeg(leadSeg, offset.top, offset.left + 11);
      case 'up':
        return moveSeg(leadSeg, offset.top - 11, offset.left);
      case 'down':
        return moveSeg(leadSeg, offset.top + 11, offset.left);
    }
  }, moveTime);
  $('body').keydown(function(e) {
    var arrowKeys;
    arrowKeys = [37, 38, 39, 40];
    if (arrowKeys.indexOf(e.keyCode) > 0) {
      return e.preventDefault();
    }
  });
  $('body').keyup(function(e) {
    e.preventDefault();
    switch (e.keyCode) {
      case 37:
        if (direction !== 'right') {
          return direction = 'left';
        }
        break;
      case 38:
        if (direction !== 'down') {
          return direction = 'up';
        }
        break;
      case 39:
        if (direction !== 'left') {
          return direction = 'right';
        }
        break;
      case 40:
        if (direction !== 'up') {
          return direction = 'down';
        }
        break;
      case 78:
        return addNewApple();
    }
  });
  if (typeof Storage !== "undefined") {
    return loadHighscores();
  }
};

moveSeg = function(s, t, l) {
  var isCollision, isSelfCollision, offset, prevSib;
  offset = s.offset();
  prevSib = s.prev('div');
  if (l > rBounds) {
    l = lBounds;
  }
  if (l < lBounds) {
    l = rBounds;
  }
  if (t < tBounds) {
    t = bBounds;
  }
  if (t > bBounds) {
    t = tBounds;
  }
  s.offset({
    top: t,
    left: l
  });
  isCollision = collision(leadSeg, newApple);
  if (isCollision) {
    appendNewSeg();
    score += 1;
    $('#score-span').text(score);
  }
  if (leadSeg !== s) {
    isSelfCollision = collision(leadSeg, s);
    if (isSelfCollision) {
      clearInterval(moveInterval);
      if (isTopScore(score)) {
        showHighscoreModal();
      } else {
        showCrashModal();
      }
    }
  }
  if (prevSib.length !== 0) {
    return moveSeg(prevSib, offset.top, offset.left);
  }
};

appendNewSeg = function() {
  var lastOffset, lastSeg;
  lastSeg = $(leadSeg.siblings().first());
  lastOffset = lastSeg.offset();
  lastSeg.before(newApple);
  newApple.offset({
    top: lastOffset.top - 12,
    left: lastOffset.left + 10
  });
  $('.snake-seg').each(function() {
    var l;
    l = $(this).offset().left;
    return $(this).offset({
      left: l - 10
    });
  });
  addNewApple();
  return setTimer();
};

growSnake = function(newSibs) {
  var i, sib, _results;
  i = 0;
  _results = [];
  while (i < newSibs) {
    sib = snakeSeg.clone();
    leadSeg.before(sib);
    _results.push(i++);
  }
  return _results;
};

addNewApple = function() {
  var left, top;
  left = getRndBetween(lBounds, rBounds).FindClosestNumberThatIsDivisibleBy(10);
  top = getRndBetween(tBounds, bBounds).FindClosestNumberThatIsDivisibleBy(10);
  newApple = snakeSeg.clone();
  $('#play-wrap').append(newApple);
  return newApple.css({
    backgroundColor: '#996f54'
  }).offset({
    top: top,
    left: left
  });
};

collision = function($div1, $div2) {
  var b1, b2, h1, h2, r1, r2, w1, w2, x1, x2, y1, y2;
  x1 = $div1.position().left;
  y1 = $div1.position().top;
  h1 = $div1.outerHeight(true);
  w1 = $div1.outerWidth(true);
  b1 = y1 + h1;
  r1 = x1 + w1;
  x2 = $div2.position().left;
  y2 = $div2.position().top;
  h2 = $div2.outerHeight(true);
  w2 = $div2.outerWidth(true);
  b2 = y2 + h2;
  r2 = x2 + w2;
  if (b1 < y2 || y1 > b2 || r1 < x2 || x1 > r2) {
    return false;
  }
  return true;
};

setTimer = function() {
  moveTime -= 2;
  clearInterval(moveInterval);
  return moveInterval = setInterval(function() {
    var lOffSet;
    lOffSet = leadSeg.offset();
    switch (direction) {
      case 'left':
        return moveSeg(leadSeg, lOffSet.top, lOffSet.left - 11);
      case 'right':
        return moveSeg(leadSeg, lOffSet.top, lOffSet.left + 11);
      case 'up':
        return moveSeg(leadSeg, lOffSet.top - 11, lOffSet.left);
      case 'down':
        return moveSeg(leadSeg, lOffSet.top + 11, lOffSet.left);
    }
  }, moveTime);
};

getRndBetween = function(lo, hi) {
  return Math.floor(lo + Math.random() * (hi - lo));
};

Number.prototype.FindClosestNumberThatIsDivisibleBy = function(n) {
  return Math.round(this / n) * n;
};

stop = function() {
  return clearInterval(moveInterval);
};

loadHighscores = function() {
  var highscores, i, sortedScores, _results;
  $('#highscores-list').children().remove();
  highscores = [];
  if (localStorage.highscores) {
    highscores = JSON.parse(localStorage.highscores);
    if (highscores.length > 1) {
      sortedScores = highscores.sort(function(a, b) {
        return b[1] - a[1];
      });
    }
    console.log(sortedScores);
    i = 0;
    _results = [];
    while (i <= 5) {
      if (sortedScores[i]) {
        displayHighscore(sortedScores[i]);
      }
      _results.push(i++);
    }
    return _results;
  }
};

displayHighscore = function(highscore) {
  return $('#highscores-list').append($('<li>').html(highscore[0] + ' <strong>' + highscore[1] + '</strong'));
};

saveHighscore = function() {
  var newHighscore, scores;
  newHighscore = [[$('#player').val()], score];
  if (localStorage.highscores) {
    scores = JSON.parse(localStorage.highscores);
  } else {
    scores = [];
  }
  scores.push(newHighscore);
  localStorage.setItem('highscores', JSON.stringify(scores));
  $('#highscore-modal').modal('hide');
  loadHighscores();
  return restart();
};

showHighscoreModal = function() {
  return $('#highscore-modal').modal();
};

isTopScore = function(score) {
  var filteredScores, scores;
  if (localStorage.highscores) {
    scores = JSON.parse(localStorage.highscores);
    filteredScores = scores.filter(function(x) {
      return x[1] >= score;
    });
    if (filteredScores.length >= 5) {
      return false;
    }
    return true;
  } else {
    return true;
  }
};

showCrashModal = function() {
  return $('#crash-modal').modal();
};

restart = function() {
  $('#crash-modal').modal('hide');
  stop();
  moveTime = 150;
  score = 0;
  $('#score-span').text(score);
  $('.snake-seg').remove();
  return startGame();
};

godMode = function() {
  $('#play-wrap').css('border', 'none');
  $('.navbar').css('backgroundColor', '#00ff00');
  lBounds = 0;
  rBounds = $(window).width();
  tBounds = 0;
  bBounds = $(window).height();
  moveTime = 82;
  return setTimer();
};
